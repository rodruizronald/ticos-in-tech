// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package job

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDataRepository creates a new instance of MockDataRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataRepository {
	mock := &MockDataRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDataRepository is an autogenerated mock type for the DataRepository type
type MockDataRepository struct {
	mock.Mock
}

type MockDataRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataRepository) EXPECT() *MockDataRepository_Expecter {
	return &MockDataRepository_Expecter{mock: &_m.Mock}
}

// Search provides a mock function for the type MockDataRepository
func (_mock *MockDataRepository) Search(ctx context.Context, params *SearchParams) ([]*Job, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SearchParams) ([]*Job, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SearchParams) []*Job); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *SearchParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDataRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockDataRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - params *SearchParams
func (_e *MockDataRepository_Expecter) Search(ctx interface{}, params interface{}) *MockDataRepository_Search_Call {
	return &MockDataRepository_Search_Call{Call: _e.mock.On("Search", ctx, params)}
}

func (_c *MockDataRepository_Search_Call) Run(run func(ctx context.Context, params *SearchParams)) *MockDataRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *SearchParams
		if args[1] != nil {
			arg1 = args[1].(*SearchParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDataRepository_Search_Call) Return(jobs []*Job, err error) *MockDataRepository_Search_Call {
	_c.Call.Return(jobs, err)
	return _c
}

func (_c *MockDataRepository_Search_Call) RunAndReturn(run func(ctx context.Context, params *SearchParams) ([]*Job, error)) *MockDataRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}
